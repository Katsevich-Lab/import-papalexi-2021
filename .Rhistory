list.files(papalexi_dir)
papalexi_dir
paste0(papalexi_dir, "/processed")
processed_dir <- paste0(papalexi_dir, "processed")
list(processed_dir)
list.files(processed_dir)
list.files(processed_dir)
processed_dir
gRNA_names
grep(pattern = "^*g*", x = gRNA_names)
grep(pattern = "^*g*", x = gRNA_names, value = TRUE)
gsub(pattern = "g[0-9]", replacement = "", x = gRNA_names)
gsub(pattern = "g[0-9]+", replacement = "", x = gRNA_names)
gRNA_targets <- gsub(pattern = "g[0-9]+", replacement = "", x = gRNA_names)
gRNA_targets
# replace "NT" with non-targeting for consistency
gRNA_targets[gRNA_targets == "NT"] <- "non-targeting"
gRNA_targets
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "NT", "non-targeting", "promoter")
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "NT", "non-targeting", "gene")
target_type
gRNA_targets
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "non-targeting", "non-targeting", "gene")
target_type
target_type
gRNA_odm_mod
# add these columns to cell covariate matrix
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch,
target = gRNA_targets,
target_type = target_type)
# add these columns to cell covariate matrix
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch) |>
ondisc::mutate_feature_covariates(target = gRNA_targets,
target_type = target_type)
gRNA_odm_mod
gRNA_odm_mod %>% ondisc::get_feature_covariates()
gRNA_odm_mod |> ondisc::get_feature_covariates()
gRNA_odm_mod
gene_counts[["UBE2L6",]]
gene_counts
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
install.packages("SeuratData")
devtools::install_github('satijalab/seurat-data')
version
data.frame(x =  I(c("hi", "me")))
data.frame(x = c("hi", "me"))
data.frame(x = list("hi", "tim"))
data.frame(x = I("hi", "tim"))
data.frame(x = I(c("hi", "tim")))
data.frame(x = I(list( c("A","B") , c("C","D") )))
df <- data.frame(x = I(list( c("A","B") , c("C","D"))))
df
nrow(df)
tibble::tibble(df)
df
df$x
df |> dplyr::mutate(l = length(x))
?I
df <- data.frame(x = I(list(c("A","B") , c("C","D"))))
df <- data.frame(x = I(list(c("A","B") , c("C"))))
df
df |> dplyr::mutate(l = length(x))
df <- data.frame(x = I(list(c("A","B") , "C")))
df
df$x
lapply(df$x, length)
lapply(df$x, length) |> as.integer()
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
SeuratData::InstallData("thp1.eccite")
# load the Seurat data object; wrangle the most important metadata features
SeuratData::InstallData("thp1.eccite")
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
SeuratData::InstallData("thp1.eccite")
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
key_covariates
head(key_covariates)
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL,
batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"),
labels = c("rep_1", "rep_2", "rep_3")))
head(key_covariates)
eccite_obj@meta.data |> head()
eccite_obj@meta.data |> dplyr::pull(guide_Id)
eccite_obj@meta.data |> dplyr::pull(guide_ID)
eccite_obj@meta.data |> dplyr::pull(guide_ID) |> as.character()
eccite_obj@meta.data |> head()
eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID)
head(eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID))
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase",
"perturbation" = "guide_ID") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL,
batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"),
labels = c("rep_1", "rep_2", "rep_3")),
perturbation = )
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase",
"perturbation" = "guide_ID") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL,
batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"),
labels = c("rep_1", "rep_2", "rep_3")))
head(key_covariates)
key_covariates$perturbation |> table()
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
# add the covariates p mito, batch, and cell cycle, and perturbation
gene_odm_mod <- gene_odm |> ondisc::mutate_cell_covariates(key_covariates)
ondisc::save_odm(odm = gene_odm_mod, metadata_fp = paste0(processed_dir, "gene/metadata.rds"))
gene_odm_mod
gene_odm_mod |> ondisc::get_cell_covariates() |> head()
##################
# 2. gRNA modality
##################
gRNA_modality <- eccite_obj[["GDO"]]
gRNA_counts <- as.matrix(gRNA_modality@counts - 1)[-1,]
gRNA_counts
dim(gRNA_counts)
gRNA_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = paste0(processed_dir, "grna/count_matrix.odm"))
# extract the target and target type of each gRNA
gRNA_names <- row.names(gRNA_counts)
gRNA_targets <- gsub(pattern = "g[0-9]+", replacement = "", x = gRNA_names)
# replace "NT" with non-targeting for consistency
gRNA_targets[gRNA_targets == "NT"] <- "non-targeting"
# replace "PDL1" with "CD278," as the gene name in the gene data is "CD278" rather than "PDL1"
gRNA_targets[gRNA_targets == "PDL1"] <- "CD274"
# include the protein effect
protein_effect <- dplyr::recode(gRNA_targets, CD86 = "CD86", CD274 = "PDL1", PDCD1LG2 = "PDL2")
protein_effect[!(protein_effect %in% c("CD86", "PDL1", "PDL2"))] <- NA
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "non-targeting", "non-targeting", "gene")
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |>
ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch) |>
ondisc::mutate_feature_covariates(target = gRNA_targets,
target_type = target_type,
known_protein_effect = protein_effect)
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |>
ondisc::mutate_cell_covariates(key_covariates) |>
ondisc::mutate_feature_covariates(target = gRNA_targets,
target_type = target_type,
known_protein_effect = protein_effect)
gRNA_odm_mod
ondisc::save_odm(odm = gRNA_odm_mod,
metadata_fp = paste0(processed_dir, "grna/metadata.rds"))
##################
# protein modality
##################
protein_modality <- eccite_obj[["ADT"]]
protein_counts <- as.matrix(protein_modality@counts)
protein_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = protein_counts,
barcodes = colnames(protein_modality),
features_df = data.frame(row.names(protein_modality)),
odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# add the covariates batch, cell cycle; also, add the gene that each protein is encoded by
protein_odm_mod <- protein_odm |>
ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch) |>
ondisc::mutate_feature_covariates(encoded_by = c("CD86", "CD274", "PDCD1LG2", "HAVCR2"))
# add the covariates batch, cell cycle; also, add the gene that each protein is encoded by
protein_odm_mod <- protein_odm |>
ondisc::mutate_cell_covariates(key_covariates) |>
ondisc::mutate_feature_covariates(encoded_by = c("CD86", "CD274", "PDCD1LG2", "HAVCR2"))
protein_odm_mod |> ondisc::get_cell_covariates() |> head()
head(key_covariates)
ondisc::save_odm(odm = protein_odm_mod, metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
SeuratData::InstallData("thp1.eccite")
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase",
"perturbation" = "guide_ID") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL,
batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"),
labels = c("rep_1", "rep_2", "rep_3")))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
# add the covariates p mito, batch, and cell cycle, and perturbation
gene_odm_mod <- gene_odm |> ondisc::mutate_cell_covariates(key_covariates)
ondisc::save_odm(odm = gene_odm_mod, metadata_fp = paste0(processed_dir, "gene/metadata.rds"))
##################
# 2. gRNA modality
##################
gRNA_modality <- eccite_obj[["GDO"]]
gRNA_counts <- as.matrix(gRNA_modality@counts - 1)[-1,]
# gRNA_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "gRNA/count_matrix.odm"),
#                              metadata_fp = paste0(processed_dir, "gRNA/metadata.rds"))
gRNA_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = paste0(processed_dir, "grna/count_matrix.odm"))
# extract the target and target type of each gRNA
gRNA_names <- row.names(gRNA_counts)
gRNA_targets <- gsub(pattern = "g[0-9]+", replacement = "", x = gRNA_names)
# replace "NT" with non-targeting for consistency
gRNA_targets[gRNA_targets == "NT"] <- "non-targeting"
# replace "PDL1" with "CD278," as the gene name in the gene data is "CD278" rather than "PDL1"
gRNA_targets[gRNA_targets == "PDL1"] <- "CD274"
# include the protein effect
protein_effect <- dplyr::recode(gRNA_targets, CD86 = "CD86", CD274 = "PDL1", PDCD1LG2 = "PDL2")
protein_effect[!(protein_effect %in% c("CD86", "PDL1", "PDL2"))] <- NA
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "non-targeting", "non-targeting", "gene")
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |>
ondisc::mutate_cell_covariates(key_covariates) |>
ondisc::mutate_feature_covariates(target = gRNA_targets,
target_type = target_type,
known_protein_effect = protein_effect)
ondisc::save_odm(odm = gRNA_odm_mod,
metadata_fp = paste0(processed_dir, "grna/metadata.rds"))
##################
# protein modality
##################
protein_modality <- eccite_obj[["ADT"]]
protein_counts <- as.matrix(protein_modality@counts)
protein_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = protein_counts,
barcodes = colnames(protein_modality),
features_df = data.frame(row.names(protein_modality)),
odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# protein_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
# metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# add the covariates batch, cell cycle; also, add the gene that each protein is encoded by
protein_odm_mod <- protein_odm |>
ondisc::mutate_cell_covariates(key_covariates) |>
ondisc::mutate_feature_covariates(encoded_by = c("CD86", "CD274", "PDCD1LG2", "HAVCR2"))
ondisc::save_odm(odm = protein_odm_mod, metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# top-level directory
papalexi_dir <-.get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
# processed subdirectory
processed_dir <- paste0(papalexi_dir, "processed/")
# list files in processed directory
list.files(processed_dir)
# load gRNA odm; save to gRNA_odm
gRNA_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "gRNA/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "gRNA/metadata.rds"))
# print several feature covariates of gRNA modality
gRNA_odm |>
ondisc::get_feature_covariates() |>
head() |> dplyr::select(target, target_type, known_protein_effect)
# create a table of the gRNA targets
gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target) |>
table()
# create a table of the target types
gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target_type) |>
table()
# create a table of the known protein effects
gRNA_odm |> ondisc::get_feature_covariates() |>
dplyr::pull(known_protein_effect) |>
stringr::str_replace_na() |>
table()
# load gene odm
gene_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"),
metadata_fp = paste0(processed_dir, "gene/metadata.rds"))
gRNA_target_genes <- gRNA_odm |> ondisc::get_feature_covariates() |>
dplyr::filter(target_type == "gene") |>
dplyr::pull(target)
all(gRNA_target_genes %in% ondisc::get_feature_ids(gene_odm))
# load protein odm
protein_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# feature covariates of proteins
protein_odm |> ondisc::get_feature_covariates()
all((protein_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull()) %in% ondisc::get_feature_ids(gene_odm))
all((gRNA_odm |> ondisc::get_feature_covariates() |>
na.omit() |>
dplyr::pull(known_protein_effect)) %in% ondisc::get_feature_ids(protein_odm))
gene_odm |> ondisc::get_cell_covariates() |> head()
gene_odm
# top-level directory
papalexi_dir <-.get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
# processed subdirectory
processed_dir <- paste0(papalexi_dir, "processed/")
# list files in processed directory
list.files(processed_dir)
# load gRNA odm; save to gRNA_odm
gRNA_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "gRNA/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "gRNA/metadata.rds"))
# print several feature covariates of gRNA modality
gRNA_odm |>
ondisc::get_feature_covariates() |>
head() |> dplyr::select(target, target_type, known_protein_effect)
# create a table of the gRNA targets
gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target) |>
table()
# create a table of the target types
gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target_type) |>
table()
# create a table of the known protein effects
gRNA_odm |> ondisc::get_feature_covariates() |>
dplyr::pull(known_protein_effect) |>
stringr::str_replace_na() |>
table()
# load gene odm
gene_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"),
metadata_fp = paste0(processed_dir, "gene/metadata.rds"))
gRNA_target_genes <- gRNA_odm |> ondisc::get_feature_covariates() |>
dplyr::filter(target_type == "gene") |>
dplyr::pull(target)
all(gRNA_target_genes %in% ondisc::get_feature_ids(gene_odm))
# load protein odm
protein_odm <- ondisc::read_odm(odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# feature covariates of proteins
protein_odm |> ondisc::get_feature_covariates()
all((protein_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull()) %in% ondisc::get_feature_ids(gene_odm))
all((gRNA_odm |> ondisc::get_feature_covariates() |>
na.omit() |>
dplyr::pull(known_protein_effect)) %in% ondisc::get_feature_ids(protein_odm))
gRNA_odm
gene_odm
gene_odm |> ondisc::get_feature_covariates() |> head()
gene_odm |> ondisc::get_cell_covariates() |> head()
gene_odm |> ondisc::get_cell_covariates() |> dplyr::pull(perturbation)
gene_odm |> ondisc::get_cell_covariates() |> dplyr::pull(perturbation) |> as.character()
pert_assignments gene_odm |> ondisc::get_cell_covariates() |> dplyr::pull(perturbation) |> as.character()
pert_assignments <- gene_odm |> ondisc::get_cell_covariates() |> dplyr::pull(perturbation) |> as.character()
head(pert_assignments)
gRNA_odm |> ondisc::get_feature_ids() |> head()
gRNA_feature_ids <-  gRNA_odm |> ondisc::get_feature_ids()
head(pert_assignments)
head(gRNA_feature_ids)
head(pert_assignments %in% gRNA_feature_ids)
all(pert_assignments %in% gRNA_feature_ids)
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
# create raw and processed subdirectories
raw_dir <- paste0(offsite_dir, "raw/")
processed_dir <- paste0(offsite_dir, "processed/")
processed_subdirs <- paste0(processed_dir, c("gene", "grna", "protein"), "/")
counts_dir <- paste0(raw_dir, "count")
counts_dir
processed_subdirs
processed_subdirs <- paste0(processed_dir, c("gene", "grna_expression", "grna_assignment", "protein"), "/")
counts_dir <- paste0(raw_dir, "count")
if (!dir.exists(raw_dir)) dir.create(raw_dir)
if (!dir.exists(processed_dir)) dir.create(processed_dir)
if (!dir.exists(counts_dir)) dir.create(counts_dir)
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
SeuratData::InstallData("thp1.eccite")
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase",
"perturbation" = "guide_ID") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL,
batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"),
labels = c("rep_1", "rep_2", "rep_3")))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
library(Seurat)
library(SeuratData)
InstallData(ds = "thp1.eccite")
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito, guide_ID) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase",
"perturbation" = "guide_ID") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL,
batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"),
labels = c("rep_1", "rep_2", "rep_3")))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
# add the covariates p mito, batch, and cell cycle, and perturbation
gene_odm_mod <- gene_odm |> ondisc::mutate_cell_covariates(key_covariates)
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
# create raw and processed subdirectories
raw_dir <- paste0(offsite_dir, "raw/")
processed_dir <- paste0(offsite_dir, "processed/")
processed_subdirs <- paste0(processed_dir, c("gene", "grna_expression", "grna_assignment", "protein"), "/")
counts_dir <- paste0(raw_dir, "count")
if (!dir.exists(raw_dir)) dir.create(raw_dir)
if (!dir.exists(processed_dir)) dir.create(processed_dir)
if (!dir.exists(counts_dir)) dir.create(counts_dir)
for (dir in processed_subdirs) {
if (!dir.exists(dir)) dir.create(dir)
}
library(Seurat)
library(SeuratData)
InstallData(ds = "thp1.eccite")
install.packages("Seurat")
install.packages("Seurat")
