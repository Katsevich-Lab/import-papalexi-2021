"GSE153056_ECCITE_metadata.tsv.gz",
"GSE153056_RAW.tar")
sources <- paste0(geo_url, filenames)
sources[4] <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE153056&format=file"
dests <- paste0(raw_dir, filenames)
count_dir <- paste0(raw_dir, "count")
# unzip/untar
untar(dests[4], exdir = count_dir)
count_dir
list.files(count_dir)
R.utils::gunzip(list.files(count_dir))
list.files(count_dir)
count_dir
count_dir <- paste0(raw_dir, "count/")
R.utils::gunzip(paste0(count_dir, list.files(count_dir)))
fs_to_unzip <- paste0(count_dir, list.files(count_dir))
fs_to_unzip
for (f in fs_to_unzip) R.utils::gunzip(f)
dests[4]
file.remove(dests[4])
count_dir
raw_dir
# unzip the other data
raw_dir
# unzip the other data
list.files(raw_dir)
filenames[1:3]
filenames[1:3]
# unzip the other data
for (f in filenames[1:3]) {
R.utils::gunzip(f)
}
filenames
dests
# unzip the other data
for (f in dests[1:3]) {
R.utils::gunzip(f)
}
.get_config_path("LOCAL_PAPALEXI_2019_DATA_DIR")
offsite_dir <- .get_config_path("LOCAL_LISCOVITCH_2021_DATA_DIR")
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
i
count_dir <- paste0(offsite_dir, "raw/")
count_dir
raw_dir <- paste0(offsite_dir, "raw/")
count_dir <- paste0(offsite_dir, "count/")
raw_dir <- paste0(offsite_dir, "raw/")
count_dir <- paste0(raw_dir, "count/")
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
raw_dir <- paste0(offsite_dir, "raw/")
count_dir <- paste0(raw_dir, "count/")
count_dir
# first, load the stimualted cells
stim_cells <- readRDS(file = paste0(count_dir, "stim_cells.rds"))
stim_cells
length(stim_cells.rds)
length(stim_cells)
raw_dir
count_dir
# next, load the gene expressions
readr::read_tsv(file = paste0(count_dir, "GSM4633614_ECCITE_cDNA_counts.tsv"))
# next, load the gene expressions
gene_exp <- readr::read_tsv(file = paste0(count_dir, "GSM4633614_ECCITE_cDNA_counts.tsv"))
dim(gene_exp)
class(gene_exp)
colnames(gene_exp) %>% head()
# finally, get the vector of stimulated cells for the SueratData object
library(Seurat)
library(SeuratData)
InstallData(ds = "thp1.eccite")
eccite <- LoadData(ds = "thp1.eccite")
GetAssay(object = eccite)
eccite@assays
GetAssay(object = eccite, "GDO")
gdo_assay <- GetAssay(object = eccite, "GDO")
gdo_assay
gdo_assay[1,]
gdo_assay[2,]
gdo_assay[3,]
gdo_assay[4,]
gdo_assay[5,]
gdo_assay[6,]
gdo_assay[,6]
gdo_assay %>% class()
gdo_assay |> class()
# first, load the stimulated cells
eccite_obj <- LoadData(ds = "thp1.eccite")
eccite_obj
class(eccite_obj)
eccite_obj@neighbors
eccite_obj@graphs
eccite_obj
eccite_obj[["rna"]]
eccite_obj[["RNA"]]
eccite_obj[["RNA"]]@meta.features
eccite_obj@meta.data
eccite_obj@meta.data %>% heaD()
eccite_obj@meta.data %>% head()
eccite_obj@meta.data |> head()
rna_modality <= eccite_obj[["RNA"]]
rna_modality <- eccite_obj[["RNA"]]
rna_modality
dim(rna_modality)
head(rna_modality)
rna_modality[1,]
rna_modality[,2]
rna_modality[1:10,]
9
row.names(rna_modality) |> head()
rna_modality
rna_modality@counts
Matrix::rowSums(rna_modality@counts)
rna_counts <- Matrix::rowSums(rna_modality@counts)
head(rna_counts)
MetaFeature(object = eccite_obj, meta.name = "meta.data")
rna_counts <- Matrix::rowSums(rna_modality@counts)
MetaFeature(object = eccite_obj, meta.name = "meta.data")
eccite_obj@meta.data %>% head()
eccite_obj@meta.data |> head()
head(rna_counts)
rna_modality <- eccite_obj[["RNA"]]
cell_rna_counts <- Matrix::rowSums(rna_modality@counts)
cell_rna_counts <- Matrix::colSums(rna_modality@counts)
cell_rna_counts
cell_rna_counts <- Matrix::colSums(rna_modality@counts)
eccite_obj@meta.data |> head()
head(cell_rna_counts)
eccite_obj
dim(rna_modality)
rna_modality
gene_counts <- as.matrix(rna_modality@counts)
dim(gene_counts)
row.names(gene_counts) |> heaD()
row.names(gene_counts) |> head()
col.names(gene_counts) |> head()
colnames(gene_counts) |> head()
?ondisc::create_ondisc_matrix_from_R_matrix
gene_counts |> row.names()
data.frame(row.names(gene_counts)) |> head()
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2019_DATA_DIR")
# create raw and processed subdirectories
raw_dir <- paste0(offsite_dir, "raw/")
processed_dir <- paste0(offsite_dir, "processed/")
processed_dir
processed_dir
paste0(processed_dir, c("gene", "gRNA", "protein"), "/")
processed_subdirs <- paste0(processed_dir, c("gene", "gRNA", "protein"), "/")
processed_subdirs
counts_dir
counts_dir <- paste0(raw_dir, "count")
for (dir in processed_subdirs) {
if (!dir.exists(dir)) dir.create(dir)
}
processed_dir
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2019_DATA_DIR")
# create raw and processed subdirectories
raw_dir <- paste0(offsite_dir, "raw/")
processed_dir <- paste0(offsite_dir, "processed/")
processed_subdirs <- paste0(processed_dir, c("gene", "gRNA", "protein"), "/")
counts_dir <- paste0(raw_dir, "count")
processed_subdirs
raw_dir
gc()
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2019_DATA_DIR")
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
# create raw and processed subdirectories
raw_dir <- paste0(offsite_dir, "raw/")
processed_dir <- paste0(offsite_dir, "processed/")
processed_subdirs <- paste0(processed_dir, c("gene", "gRNA", "protein"), "/")
counts_dir <- paste0(raw_dir, "count")
raw_dir
processed_dir
processed_subdirs
counts_dir
if (!dir.exists(raw_dir)) dir.create(raw_dir)
if (!dir.exists(processed_dir)) dir.create(processed_dir)
if (!dir.exists(counts_dir)) dir.create(counts_dir)
for (dir in processed_subdirs) {
if (!dir.exists(dir)) dir.create(dir)
}
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
raw_dir <- paste0(offsite_dir, "raw/")
count_dir <- paste0(raw_dir, "count/")
# load the seurat data object
eccite_obj <- LoadData(ds = "thp1.eccite")
# gene modality first
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
count_dir
list.files(count_dir)
offsite_dir
offsite_dir
processed_dir <- paste0(offsite_dir, "processed")
processed_dir <- paste0(offsite_dir, "processed/")
processed_dir
paste0(processed_dir, "gene/")
paste0(processed_dir, "gene/expression_matrix.odm")
ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
eccite_obj@meta.data |> head()
eccite_obj@meta.data
eccite_obj@meta.data |> head
eccite_obj@meta.data |> head()
key_covariates <- eccite_obj@meta.data %>% dplyr::select(MULTI_classification.global, HTO_classification, MULTI_ID, MULTI_classification)
key_covariates <- eccite_obj@meta.data |> dplyr::select(MULTI_classification.global, HTO_classification, MULTI_ID, MULTI_classification)
head(key_covariates)
key_covariates <- eccite_obj@meta.data |> dplyr::select(MULTI_classification.global, HTO_classification, MULTI_ID, MULTI_classification) |> table()
key_covariates
key_covariates
key_covariates <- eccite_obj@meta.data |> dplyr::select(MULTI_classification.global, HTO_classification, MULTI_ID, MULTI_classification)
table(key_covariates$MULTI_classification.global, key_covariates$HTO_classification)
table(key_covariates$MULTI_classification.global, key_covariates$MULTI_ID)
table(key_covariates$MULTI_classification.global, key_covariates$MULTI_classification)
gene_odm
key_covariates <- eccite_obj@meta.data |> dplyr::select(MULTI_classification.global, Phase, percent.mito)
key_covariates
head(key_covariates)
eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100)
head(key_covariates)
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL)
head(key_covariates)
key_covariates$batch |> table()
head(key_covariates)
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx")))
head(key_covariates)
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
head(key_covariates)
key_covariates$phase
key_covariates$batch
key_covariates$p_mito
head(key_covariates)
# add the covariates p mito, batch, and cell cycle
gene_odm_mod <- gene_odm |> ondisc::mutate_cell_covariates(key_covariates)
gene_odm_mod |> ondisc::get_cell_covariates() |> head()
paste0(processed_dir, "gene/")
paste0(processed_dir, "gene/metadata.rds")
ondisc::save_odm(odm = gene_odm_mod, metadata_fp = paste0(processed_dir, "gene/metadata.rds"))
gene_odm_mod[[1,]]
gene_odm_mod[[,1]]
gene_odm_mod[[10,]]
gene_odm_mod[[12,]]
gene_odm_mod[[60,]]
gene_odm_mod[[80,]]
gene_odm_mod[[80:85,]][,1:30]
gene_odm_mod[[80:90,]][,1:30]
##################
# 2. gRNA modality
##################
gRNA_modality <- eccite_obj[["gRNA"]]
eccite_obj@assays
eccite_obj[["GDO"]]
##################
# 2. gRNA modality
##################
gRNA_modality <- eccite_obj[["GDO"]]
gRNA_modality@counts[1:5,1:5]
class(gRNA_modality)
gRNA_modality@counts
gRNA_modality@counts - 1
gRNA_counts <- as.matrix(gRNA_modality@counts - 1)
dim(gRNA_counts)
gRNA_counts[,1]
gRNA_counts[1,]
gRNA_counts[10,]
gene_odm[[,1]]
row.names(gRNA_counts)
colnames(gRNA_counts)
data.frame(row.names(gRNA_counts))
processed_dir
gRNA_counts
gRNA_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = paste0(processed_dir, "gRNA/count_matrix.odm"))
gRNA_odm
gRNA_odm[[,1]]
gRNA_odm[[1,]]
gRNA_odm |> dim()
gRNA_odm
gRNA_odm |> ondisc::get_feature_names()
gRNA_odm
key_covariates
head(key_covariates)
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch)
gRNA_odm_mod
gRNA_odm_mod
ondisc::save_odm(odm = gRNA_odm_mod, metadata_fp = paste0(processed_dir, "gRNA/metadata.rds"))
gRNA_odm_mod[[,1]]
gRNA_odm_mod[[1,]]
##################
# protein modality
##################
protein_modality <- eccite_obj[["GDO"]]
eccite_obj@assays
##################
# protein modality
##################
protein_modality <- eccite_obj[["ADT"]]
protein_modality
protein_counts <- as.matrix(protein_modality@counts)
protein_counts
protein_counts[,1:4]
colnames(protein_modality)
data.frame(row.names(protein_modality))
protein_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = protein_modality,
barcodes = colnames(protein_modality),
features_df = data.frame(row.names(protein_modality)),
odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
class(protein_counts)
colnames(protein_modality) |> heaD()
colnames(protein_modality) |> head()
protein_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = protein_counts,
barcodes = colnames(protein_modality),
features_df = data.frame(row.names(protein_modality)),
odm_fp = paste0(processed_dir, "protein/count_matrix.odm"),
metadata_fp = paste0(processed_dir, "protein/metadata.rds"))
# add the covariates batch, cell cycle
protein_odm_mod <- protein_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch)
protein_odm_mod
protein_odm_mod[[,m1]]
protein_odm_mod[[,1]]
protein_odm_mod[[1,]]
protein_odm_mod[[1,]]
9
protein_odm_mod[[1,]]
ondisc::save_odm(odm = gRNA_odm_mod, metadata_fp = paste0(processed_dir, "gRNA/metadata.rds"))
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- LoadData(ds = "thp1.eccite")
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
# add the covariates p mito, batch, and cell cycle
gene_odm_mod <- gene_odm |> ondisc::mutate_cell_covariates(key_covariates)
ondisc::save_odm(odm = gene_odm_mod, metadata_fp = paste0(processed_dir, "gene/metadata.rds"))
##################
# 1. gene modality
##################
rna_modality <- eccite_obj[["RNA"]]
gene_counts <- as.matrix(rna_modality@counts)
gene_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gene_counts,
barcodes = colnames(gene_counts),
features_df = data.frame(row.names(gene_counts)),
odm_fp = paste0(processed_dir, "gene/expression_matrix.odm"))
# add the covariates p mito, batch, and cell cycle
gene_odm_mod <- gene_odm |> ondisc::mutate_cell_covariates(key_covariates)
##################
# 2. gRNA modality
##################
gRNA_modality <- eccite_obj[["GDO"]]
gRNA_counts <- as.matrix(gRNA_modality@counts - 1)
gRNA_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = paste0(processed_dir, "gRNA/count_matrix.odm"))
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch)
gRNA_odm_mod
##################
# 2. gRNA modality
##################
gRNA_modality <- eccite_obj[["GDO"]]
gRNA_counts <- as.matrix(gRNA_modality@counts - 1)
gRNA_odm <- ondisc::create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = paste0(processed_dir, "gRNA/count_matrix.odm"))
gRNA_odm
gRNA_odm[[1,]]
gRNA_odm[[2,]]
gRNA_odm[[,1]]
gRNA_odm
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch)
gRNA_odm_mod
gRNA_odm_mod
gRNA_odm_mod
gRNA_odm_mod
gRNA_odm_mod
gRNA_odm_mod$
gRNA_counts %>% row.names()
row.names(gRNA_counts)
# extract the target and target type of each gRNA
gRNA_names <- row.names(gRNA_modality)
gRNA_names
# top-level directory
papalexi_dir <-.get_config_path("LOCAL_SCHRAIVOGEL_2021_DATA_DIR")
papalexi_dir
# top-level directory
papalexi_dir <-.get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
papalexi_dir
papalexi_dir
# top-level directory
papalexi_dir <-.get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
list.files(papalexi_dir)
papalexi_dir
paste0(papalexi_dir, "/processed")
processed_dir <- paste0(papalexi_dir, "processed")
list(processed_dir)
list.files(processed_dir)
list.files(processed_dir)
processed_dir
gRNA_names
grep(pattern = "^*g*", x = gRNA_names)
grep(pattern = "^*g*", x = gRNA_names, value = TRUE)
gsub(pattern = "g[0-9]", replacement = "", x = gRNA_names)
gsub(pattern = "g[0-9]+", replacement = "", x = gRNA_names)
gRNA_targets <- gsub(pattern = "g[0-9]+", replacement = "", x = gRNA_names)
gRNA_targets
# replace "NT" with non-targeting for consistency
gRNA_targets[gRNA_targets == "NT"] <- "non-targeting"
gRNA_targets
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "NT", "non-targeting", "promoter")
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "NT", "non-targeting", "gene")
target_type
gRNA_targets
# finally, get the "target_type"
target_type <- ifelse(gRNA_targets == "non-targeting", "non-targeting", "gene")
target_type
target_type
gRNA_odm_mod
# add these columns to cell covariate matrix
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch,
target = gRNA_targets,
target_type = target_type)
# add these columns to cell covariate matrix
# add the covariates batch, cell cycle
gRNA_odm_mod <- gRNA_odm |> ondisc::mutate_cell_covariates(phase = key_covariates$phase,
batch = key_covariates$batch) |>
ondisc::mutate_feature_covariates(target = gRNA_targets,
target_type = target_type)
gRNA_odm_mod
gRNA_odm_mod %>% ondisc::get_feature_covariates()
gRNA_odm_mod |> ondisc::get_feature_covariates()
gRNA_odm_mod
gene_counts[["UBE2L6",]]
gene_counts
offsite_dir <- .get_config_path("LOCAL_PAPALEXI_2021_DATA_DIR")
processed_dir <- paste0(offsite_dir, "processed/")
# load the Seurat data object; wrangle the most important metadata features
eccite_obj <- SeuratData::LoadData(ds = "thp1.eccite")
key_covariates <- eccite_obj@meta.data |>
dplyr::select(MULTI_classification.global, Phase, percent.mito) |>
dplyr::rename("batch" = "MULTI_classification.global",
"phase" = "Phase") |>
dplyr::mutate(p_mito = percent.mito/100, percent.mito = NULL) |>
dplyr::mutate(batch = factor(x = batch, levels = c("rep1-tx", "rep2-tx", "rep3-tx"), labels = c("rep_1", "rep_2", "rep_3")))
